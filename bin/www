#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('angular2-nodejs:server');
var http = require('http');
const translate = require('@vitalets/google-translate-api');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);

io.on('connection',(socket)=>{

    console.log('new connection made.');


    socket.on('join', function(data){
      //joining
      socket.join(data.room);

      console.log(data.user + ' joined the server : ' + data.room);

      socket.broadcast.to(data.room).emit(' new user joined', {user:data.user, message:'has joined this server.'});

    });

    socket.on('lang', function(data){
      socket.join(data.lang)

      console.log(data.user + ' chose : ' + data.lang);
  
    });

    socket.on('leave', function(data){
    
      console.log(data.user + ' left the server : ' + data.room);

      socket.broadcast.to(data.room).emit('left server', {user:data.user, message:'has left this server.'});

      socket.leave(data.room);
    });

    socket.on('message',function(data){
      if(data.lang == 'en')
      {
        translate(data.message, {to: 'en'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'af')
      {
        translate(data.message, {to: 'af'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }
      
      if(data.lang == 'ar')
      {
        translate(data.message, {to: 'ar'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'bg')
      {
        translate(data.message, {to: 'bg'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'zh-TW')
      {
        translate(data.message, {to: 'zh-TW'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'cs')
      {
        translate(data.message, {to: 'cs'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'nl')
      {
        translate(data.message, {to: 'nl'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'fr')
      {
        translate(data.message, {to: 'fr'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'de')
      {
        translate(data.message, {to: 'de'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'gu')
      {
        translate(data.message, {to: 'gu'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'it')
      {
        translate(data.message, {to: 'it'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ja')
      {
        translate(data.message, {to: 'ja'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ko')
      {
        translate(data.message, {to: 'ko'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'la')
      {
        translate(data.message, {to: 'la'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'mk')
      {
        translate(data.message, {to: 'mk'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ne')
      {
        translate(data.message, {to: 'ne'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'pa')
      {
        translate(data.message, {to: 'pa'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ru')
      {
        translate(data.message, {to: 'ru'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ta')
      {
        translate(data.message, {to: 'ta'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'ur')
      {
        translate(data.message, {to: 'ur'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'vi')
      {
        translate(data.message, {to: 'vi'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'yo')
      {
        translate(data.message, {to: 'yo'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'zu')
      {
        translate(data.message, {to: 'zu'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
          
      }).catch(err => {
          console.error(err);
      });
      }

      if(data.lang == 'es') 
      {
        translate(data.message, {to: 'es'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
  
      }).catch(err => {
          console.error(err);
      });
      }
      if(data.lang == 'hi')
      {
        translate(data.message, {to: 'hi'}).then(res => {
          console.log(res.text);
          console.log(res.from.language.iso);
          io.in(data.room).emit('new message', {user:data.user, message:res.text});
  
      }).catch(err => {
          console.error(err);
      });
      }
      

    })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
